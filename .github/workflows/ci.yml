name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      # Local Cosmos DB emulator using a public Docker image
      cosmosdb-emulator:
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10251:10251
          - 10252:10252
          - 10253:10253
          - 10254:10254
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 10
          AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: 127.0.0.1
        options: >-
          --name=cosmosdb-emulator
          --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
          --cpus 2.0
          --memory 2GB
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: cd backend && npm ci
    
    - name: Lint
      run: cd backend && npm run lint
    
    - name: Run unit tests
      run: cd backend && npm test
      env:
        COSMOS_ENDPOINT: https://localhost:8081
        COSMOS_KEY: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
        JWT_SECRET: test-secret-key
        APPLICATIONINSIGHTS_CONNECTION_STRING: InstrumentationKey=00000000-0000-0000-0000-000000000000
    
    - name: Run integration tests
      run: cd backend && npm run integration
      env:
        COSMOS_ENDPOINT: https://localhost:8081
        COSMOS_KEY: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
        JWT_SECRET: test-secret-key
        APPLICATIONINSIGHTS_CONNECTION_STRING: InstrumentationKey=00000000-0000-0000-0000-000000000000
    
    - name: Generate coverage report
      run: cd backend && npm run coverage
      env:
        COSMOS_ENDPOINT: https://localhost:8081
        COSMOS_KEY: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
        JWT_SECRET: test-secret-key
        APPLICATIONINSIGHTS_CONNECTION_STRING: InstrumentationKey=00000000-0000-0000-0000-000000000000
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/coverage/
    
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Lint
      run: cd frontend && npm run lint
    
    - name: Run unit tests
      run: cd frontend && npm test
    
    - name: Generate coverage report
      run: cd frontend && npm test -- --coverage
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage/
  
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install wait-on
      run: npm install -g wait-on
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Install Cypress
      run: cd frontend && npx cypress install
    
    - name: Start backend (background)
      run: cd backend && npm run start:test &
      env:
        JWT_SECRET: test-secret-key
        MOCK_SERVICES: true
    
    - name: Start frontend (background)
      run: cd frontend && npm start &
    
    - name: Wait for backend to be ready
      run: wait-on -t 60000 http://localhost:4000/health
    
    - name: Wait for frontend to be ready
      run: wait-on -t 60000 http://localhost:3000
    
    - name: Run Cypress tests
      run: cd frontend && npx cypress run --record
      env:
        CYPRESS_BASE_URL: http://localhost:3000
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY || 'fake-key-for-ci' }}
    
    - name: Upload Cypress artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-artifacts
        path: |
          frontend/cypress/videos/
          frontend/cypress/screenshots/
  
  checks:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    
    steps:
    - name: All tests passed
      run: echo "âœ… All tests passed!" 