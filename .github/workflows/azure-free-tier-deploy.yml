name: Deploy to Azure Free Tier

on:
  push:
    branches: [ master, main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/azure-free-tier-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean

env:
  AZURE_RESOURCE_GROUP: perfectltp-free-rg
  AZURE_WEBAPP_NAME: perfectltp-api-free
  AZURE_STATICWEBAPP_NAME: perfectltp-frontend-free
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.deploy_backend
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Verify simple server exists and test
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          if [ -f "simple-server.js" ]; then
            echo "✅ simple-server.js found"
            echo "File size: $(wc -c < simple-server.js) bytes"
            
            # Check syntax
            node -c simple-server.js
            echo "✅ Syntax check passed"
            
            # Check if required dependencies are available
            echo "Checking dependencies..."
            node -e "console.log('Express:', require('express').version || 'available')" || echo "Express not available"
            node -e "console.log('CORS:', typeof require('cors'))" || echo "CORS not available"
            
          else
            echo "❌ simple-server.js not found"
            echo "Available files:"
            find . -name "*.js" -type f
            exit 1
          fi

  deploy-backend:
    name: Deploy Backend to App Service
    runs-on: ubuntu-latest
    needs: test-backend
    if: always() && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci --production

      - name: Create deployment package
        run: |
          # Remove existing deployment directory
          rm -rf simple-deploy
          mkdir -p simple-deploy
          
          # Copy necessary files
          cp simple-server.js simple-deploy/
          cp package.json simple-deploy/
          cp package-lock.json simple-deploy/
          
          # Create custom package.json for deployment
          cat > simple-deploy/package.json << 'EOF'
          {
            "name": "perfectltp-backend",
            "version": "1.0.0",
            "description": "Perfect LifeTracker Pro Backend API",
            "main": "simple-server.js",
            "scripts": {
              "start": "node simple-server.js"
            },
            "dependencies": {
              "express": "^4.21.2",
              "cors": "^2.8.5",
              "@azure/cosmos": "^4.4.1"
            }
          }
          EOF
          
          # Create web.config for Windows IIS/iisnode
          cat > simple-deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="simple-server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="simple-server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                node_env="%node_env%"
                nodeProcessCountPerApplication="1"
                maxConcurrentRequestsPerProcess="1024"
                maxNamedPipeConnectionRetry="3"
                namedPipeConnectionRetryDelay="2000"
                maxNamedPipeConnectionPoolSize="512"
                maxNamedPipePooledConnectionAge="30000"
                asyncCompletionThreadCount="0"
                initialRequestBufferSize="4096"
                maxRequestBufferSize="65536"
                watchedFiles="*.js"
                uncFileChangesPollingInterval="5000"
                gracefulShutdownTimeout="60000"
                loggingEnabled="true"
                logDirectoryNameSuffix="logs"
                debuggingEnabled="false"
                devErrorsEnabled="false"/>
            </system.webServer>
          </configuration>
          EOF
          
          # Install production dependencies
          cd simple-deploy
          npm install --production --no-optional
          
          # Verify deployment package
          echo "Files in deployment package:"
          ls -la
          echo "simple-server.js exists:" && test -f simple-server.js && echo "YES" || echo "NO"
          echo "package.json exists:" && test -f package.json && echo "YES" || echo "NO"
          echo "node_modules exists:" && test -d node_modules && echo "YES" || echo "NO"

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./backend/simple-deploy

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || inputs.deploy_frontend
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
          VITE_APP_NAME: Perfect LifeTracker Pro
          VITE_ENVIRONMENT: production

  deploy-frontend:
    name: Deploy Frontend to Static Web App
    runs-on: ubuntu-latest
    needs: test-frontend
    if: always() && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
          VITE_APP_NAME: Perfect LifeTracker Pro
          VITE_ENVIRONMENT: production

      - name: Deploy to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: './frontend/dist'
          skip_app_build: true
          skip_api_build: true

  health-check:
    name: Health Check Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check backend health
        if: needs.deploy-backend.result == 'success'
        run: |
          for i in {1..5}; do
            if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health; then
              echo "Backend health check passed!"
              break
            else
              echo "Backend health check failed, attempt $i/5"
              sleep 30
            fi
          done

      - name: Check frontend deployment
        if: needs.deploy-frontend.result == 'success'
        run: |
          echo "Frontend deployment completed successfully!"
          echo "Check Azure portal for Static Web App URL"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|-----|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "| Backend API | ✅ Deployed | https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend API | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "| Frontend | ✅ Deployed | Check Azure Portal |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Monthly Cost:** $0.00 (Azure Free Tier)" >> $GITHUB_STEP_SUMMARY 