# Docker Compose configuration for Perfect LifeTracker Pro
# Uses multi-stage builds and production-ready configurations

services:
  # Frontend service (React/Vite app served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: prod
    container_name: lifetrack-frontend
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    environment:
      - VITE_API_URL=http://backend:3001
      - VITE_REACT_APP_AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-d9764c39-1eb9-4963-83a0-e8ba859c8965}
      - VITE_REACT_APP_AZURE_AUTHORITY=https://login.microsoftonline.com/78e9993f-a208-4c38-9d9d-6b15f0d2407d
      - VITE_REACT_APP_AZURE_REDIRECT_URI=${AZURE_REDIRECT_URI:-http://localhost:8080}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - app-network

  # Backend service (Node.js Express API)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: prod
    container_name: lifetrack-backend
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Cosmos DB Configuration
      - COSMOS_DB_ENDPOINT=${COSMOS_DB_ENDPOINT:-https://localhost:8081}
      - COSMOS_DB_KEY=${COSMOS_DB_KEY:-dummy-key-for-development}
      - COSMOS_DB_DATABASE=${COSMOS_DB_DATABASE:-lifetracker}
      # MongoDB Configuration (alternative to Cosmos DB)
      - MONGODB_URI=${MONGODB_URI:-mongodb://localhost:27017/perfectltp}
      # Azure Authentication
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-d9764c39-1eb9-4963-83a0-e8ba859c8965}
      - AZURE_AUTHORITY=${AZURE_AUTHORITY:-https://login.microsoftonline.com/78e9993f-a208-4c38-9d9d-6b15f0d2407d}
      # Database Mode
      - USE_MOCK_DATABASE=true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - mongo

  # MongoDB service for development and production
  mongo:
    image: mongo:7.0
    container_name: lifetrack-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

# Custom development mode setup using profiles
# Usage: docker-compose --profile dev up
  # Development mode frontend (with hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: lifetrack-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_REACT_APP_AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-d9764c39-1eb9-4963-83a0-e8ba859c8965}
      - VITE_REACT_APP_AZURE_AUTHORITY=https://login.microsoftonline.com/78e9993f-a208-4c38-9d9d-6b15f0d2407d
      - VITE_REACT_APP_AZURE_REDIRECT_URI=${AZURE_REDIRECT_URI:-http://localhost:3000}
      - VITE_API_URL=http://backend-dev:3001
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - backend-dev
    restart: unless-stopped
    networks:
      - app-network
    profiles: ["dev"]

  # Development mode backend (with hot reload)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: lifetrack-backend-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      # Cosmos DB Configuration
      - COSMOS_DB_ENDPOINT=${COSMOS_DB_ENDPOINT:-https://localhost:8081}
      - COSMOS_DB_KEY=${COSMOS_DB_KEY:-dummy-key-for-development}
      - COSMOS_DB_DATABASE=${COSMOS_DB_DATABASE:-lifetracker}
      # MongoDB Configuration (alternative to Cosmos DB)
      - MONGODB_URI=${MONGODB_URI:-mongodb://localhost:27017/perfectltp}
      # Azure Authentication
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-d9764c39-1eb9-4963-83a0-e8ba859c8965}
      - AZURE_AUTHORITY=${AZURE_AUTHORITY:-https://login.microsoftonline.com/78e9993f-a208-4c38-9d9d-6b15f0d2407d}
      # CORS settings
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    command: npm run dev
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - mongo
    profiles: ["dev"]

# Shared volumes for node_modules (avoids problems with mounted volumes)
volumes:
  frontend_node_modules:
  backend_node_modules:
  mongo_data:

# Custom network for service communication
networks:
  app-network:
    driver: bridge